function [methodinfo,structs,enuminfo,ThunkLibName]=delete_this_file
%DELETE_THIS_FILE Create structures to define interfaces found in 'LimeSuite_Build_Thunk'.

%This function was generated by loadlibrary.m parser version  on Fri May  1 15:03:32 2020
%perl options:'LimeSuite_Build_Thunk.i -outfile=delete_this_file.m -thunkfile=libLimeSuite_thunk_pcwin64.c -header=LimeSuite_Build_Thunk.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libLimeSuite_thunk_pcwin64');
%  int __cdecl LMS_GetDeviceList ( lms_info_str_t * dev_list ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_GetDeviceList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Open ( lms_device_t ** device , const lms_info_str_t info , void * args ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_Open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'int8Ptr', 'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Close ( lms_device_t * device ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_Close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Disconnect ( lms_device_t * device ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_Disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  _Bool __cdecl LMS_IsOpen ( lms_device_t * device , int port ); 
fcns.thunkname{fcnNum}='_BoolvoidPtrint32Thunk';fcns.name{fcnNum}='LMS_IsOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Init ( lms_device_t * device ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_Init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetNumChannels ( lms_device_t * device , _Bool dir_tx ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolThunk';fcns.name{fcnNum}='LMS_GetNumChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_EnableChannel ( lms_device_t * device , _Bool dir_tx , size_t chan , _Bool enabled ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64_BoolThunk';fcns.name{fcnNum}='LMS_EnableChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetSampleRate ( lms_device_t * device , float_type rate , size_t oversample ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleuint64Thunk';fcns.name{fcnNum}='LMS_SetSampleRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetSampleRate ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * host_Hz , float_type * rf_Hz ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_GetSampleRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetSampleRateRange ( lms_device_t * device , _Bool dir_tx , lms_range_t * range ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolvoidPtrThunk';fcns.name{fcnNum}='LMS_GetSampleRateRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'lms_range_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetLOFrequency ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type frequency ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64doubleThunk';fcns.name{fcnNum}='LMS_SetLOFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetLOFrequency ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * frequency ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetLOFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetLOFrequencyRange ( lms_device_t * device , _Bool dir_tx , lms_range_t * range ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolvoidPtrThunk';fcns.name{fcnNum}='LMS_GetLOFrequencyRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'lms_range_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetAntennaList ( lms_device_t * dev , _Bool dir_tx , size_t chan , lms_name_t * list ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetAntennaList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'int8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetAntenna ( lms_device_t * dev , _Bool dir_tx , size_t chan , size_t index ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64uint64Thunk';fcns.name{fcnNum}='LMS_SetAntenna'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetAntenna ( lms_device_t * dev , _Bool dir_tx , size_t chan ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64Thunk';fcns.name{fcnNum}='LMS_GetAntenna'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetAntennaBW ( lms_device_t * dev , _Bool dir_tx , size_t chan , size_t index , lms_range_t * range ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64uint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetAntennaBW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'uint64', 'lms_range_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetNormalizedGain ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type gain ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64doubleThunk';fcns.name{fcnNum}='LMS_SetNormalizedGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetGaindB ( lms_device_t * device , _Bool dir_tx , size_t chan , unsigned gain ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64uint32Thunk';fcns.name{fcnNum}='LMS_SetGaindB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetNormalizedGain ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * gain ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetNormalizedGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetGaindB ( lms_device_t * device , _Bool dir_tx , size_t chan , unsigned * gain ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetGaindB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetLPFBW ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type bandwidth ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64doubleThunk';fcns.name{fcnNum}='LMS_SetLPFBW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetLPFBW ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * bandwidth ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetLPFBW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetLPFBWRange ( lms_device_t * device , _Bool dir_tx , lms_range_t * range ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolvoidPtrThunk';fcns.name{fcnNum}='LMS_GetLPFBWRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'lms_range_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetLPF ( lms_device_t * device , _Bool dir_tx , size_t chan , _Bool enable ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64_BoolThunk';fcns.name{fcnNum}='LMS_SetLPF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetGFIRLPF ( lms_device_t * device , _Bool dir_tx , size_t chan , _Bool enabled , float_type bandwidth ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64_BooldoubleThunk';fcns.name{fcnNum}='LMS_SetGFIRLPF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'bool', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Calibrate ( lms_device_t * device , _Bool dir_tx , size_t chan , double bw , unsigned flags ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64doubleuint32Thunk';fcns.name{fcnNum}='LMS_Calibrate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'double', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_LoadConfig ( lms_device_t * device , const char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='LMS_LoadConfig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SaveConfig ( lms_device_t * device , const char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='LMS_SaveConfig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetTestSignal ( lms_device_t * device , _Bool dir_tx , size_t chan , lms_testsig_t sig , int16_t dc_i , int16_t dc_q ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64lms_testsig_tint16int16Thunk';fcns.name{fcnNum}='LMS_SetTestSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'lms_testsig_t', 'int16', 'int16'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetTestSignal ( lms_device_t * device , _Bool dir_tx , size_t chan , lms_testsig_t * sig ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetTestSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'lms_testsig_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetSampleRateDir ( lms_device_t * device , _Bool dir_tx , float_type rate , size_t oversample ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booldoubleuint64Thunk';fcns.name{fcnNum}='LMS_SetSampleRateDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'double', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetNCOFrequency ( lms_device_t * device , _Bool dir_tx , size_t chan , const float_type * freq , float_type pho ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrdoubleThunk';fcns.name{fcnNum}='LMS_SetNCOFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetNCOFrequency ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * freq , float_type * pho ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_GetNCOFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetNCOPhase ( lms_device_t * device , _Bool dir_tx , size_t chan , const float_type * phases , float_type fcw ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrdoubleThunk';fcns.name{fcnNum}='LMS_SetNCOPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetNCOPhase ( lms_device_t * device , _Bool dir_tx , size_t chan , float_type * phases , float_type * fcw ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_GetNCOPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetNCOIndex ( lms_device_t * device , _Bool dir_tx , size_t chan , int index , _Bool downconv ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64int32_BoolThunk';fcns.name{fcnNum}='LMS_SetNCOIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'int32', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetNCOIndex ( lms_device_t * device , _Bool dir_tx , size_t chan ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64Thunk';fcns.name{fcnNum}='LMS_GetNCOIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetGFIRCoeff ( lms_device_t * device , _Bool dir_tx , size_t chan , lms_gfir_t filt , const float_type * coef , size_t count ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64lms_gfir_tvoidPtruint64Thunk';fcns.name{fcnNum}='LMS_SetGFIRCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'lms_gfir_t', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetGFIRCoeff ( lms_device_t * device , _Bool dir_tx , size_t chan , lms_gfir_t filt , float_type * coef ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64lms_gfir_tvoidPtrThunk';fcns.name{fcnNum}='LMS_GetGFIRCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'lms_gfir_t', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetGFIR ( lms_device_t * device , _Bool dir_tx , size_t chan , lms_gfir_t filt , _Bool enabled ); 
fcns.thunkname{fcnNum}='int32voidPtr_Booluint64lms_gfir_t_BoolThunk';fcns.name{fcnNum}='LMS_SetGFIR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'uint64', 'lms_gfir_t', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_VCTCXOWrite ( lms_device_t * dev , uint16_t val ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='LMS_VCTCXOWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl LMS_VCTCXORead ( lms_device_t * dev , uint16_t * val ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_VCTCXORead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Reset ( lms_device_t * device ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_Reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_ReadLMSReg ( lms_device_t * device , uint32_t address , uint16_t * val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='LMS_ReadLMSReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_WriteLMSReg ( lms_device_t * device , uint32_t address , uint16_t val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint16Thunk';fcns.name{fcnNum}='LMS_WriteLMSReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl LMS_ReadFPGAReg ( lms_device_t * device , uint32_t address , uint16_t * val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='LMS_ReadFPGAReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_WriteFPGAReg ( lms_device_t * device , uint32_t address , uint16_t val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint16Thunk';fcns.name{fcnNum}='LMS_WriteFPGAReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl LMS_ReadCustomBoardParam ( lms_device_t * device , uint8_t id , float_type * val , lms_name_t units ); 
fcns.thunkname{fcnNum}='int32voidPtruint8voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_ReadCustomBoardParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'doublePtr', 'int8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_WriteCustomBoardParam ( lms_device_t * device , uint8_t id , float_type val , const lms_name_t units ); 
fcns.thunkname{fcnNum}='int32voidPtruint8doublevoidPtrThunk';fcns.name{fcnNum}='LMS_WriteCustomBoardParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'double', 'int8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetClockFreq ( lms_device_t * dev , size_t clk_id , float_type * freq ); 
fcns.thunkname{fcnNum}='int32voidPtruint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetClockFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetClockFreq ( lms_device_t * dev , size_t clk_id , float_type freq ); 
fcns.thunkname{fcnNum}='int32voidPtruint64doubleThunk';fcns.name{fcnNum}='LMS_SetClockFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'double'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Synchronize ( lms_device_t * dev , _Bool toChip ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolThunk';fcns.name{fcnNum}='LMS_Synchronize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GPIORead ( lms_device_t * dev , uint8_t * buffer , size_t len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='LMS_GPIORead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GPIOWrite ( lms_device_t * dev , const uint8_t * buffer , size_t len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='LMS_GPIOWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GPIODirRead ( lms_device_t * dev , uint8_t * buffer , size_t len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='LMS_GPIODirRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GPIODirWrite ( lms_device_t * dev , const uint8_t * buffer , size_t len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='LMS_GPIODirWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
%  int __cdecl LMS_EnableCalibCache ( lms_device_t * dev , _Bool enable ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolThunk';fcns.name{fcnNum}='LMS_EnableCalibCache'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetChipTemperature ( lms_device_t * dev , size_t ind , float_type * temp ); 
fcns.thunkname{fcnNum}='int32voidPtruint64voidPtrThunk';fcns.name{fcnNum}='LMS_GetChipTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SetupStream ( lms_device_t * device , lms_stream_t * stream ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_SetupStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'lms_stream_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_DestroyStream ( lms_device_t * dev , lms_stream_t * stream ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_DestroyStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'lms_stream_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_StartStream ( lms_stream_t * stream ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_StartStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'lms_stream_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_StopStream ( lms_stream_t * stream ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LMS_StopStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'lms_stream_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_RecvStream ( lms_stream_t * stream , void * samples , size_t sample_count , lms_stream_meta_t * meta , unsigned timeout_ms ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64voidPtruint32Thunk';fcns.name{fcnNum}='LMS_RecvStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'lms_stream_tPtr', 'voidPtr', 'uint64', 'lms_stream_meta_tPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_GetStreamStatus ( lms_stream_t * stream , lms_stream_status_t * status ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_GetStreamStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'lms_stream_tPtr', 'lms_stream_status_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_SendStream ( lms_stream_t * stream , const void * samples , size_t sample_count , const lms_stream_meta_t * meta , unsigned timeout_ms ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64voidPtruint32Thunk';fcns.name{fcnNum}='LMS_SendStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'lms_stream_tPtr', 'voidPtr', 'uint64', 'lms_stream_meta_tPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_UploadWFM ( lms_device_t * device , const void ** samples , uint8_t chCount , size_t sample_count , int format ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint8uint64int32Thunk';fcns.name{fcnNum}='LMS_UploadWFM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr', 'uint8', 'uint64', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl LMS_EnableTxWFM ( lms_device_t * device , unsigned chan , _Bool active ); 
fcns.thunkname{fcnNum}='int32voidPtruint32_BoolThunk';fcns.name{fcnNum}='LMS_EnableTxWFM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'bool'};fcnNum=fcnNum+1;
%  int __cdecl LMS_Program ( lms_device_t * device , const char * data , size_t size , lms_prog_trg_t target , lms_prog_md_t mode , lms_prog_callback_t callback ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringuint64lms_prog_trg_tlms_prog_md_tvoidPtrThunk';fcns.name{fcnNum}='LMS_Program'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint64', 'lms_prog_trg_t', 'lms_prog_md_t', 'FcnPtr'};fcnNum=fcnNum+1;
%  int __cdecl LMS_ProgramUpdate ( lms_device_t * dev , _Bool download , lms_prog_callback_t callback ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolvoidPtrThunk';fcns.name{fcnNum}='LMS_ProgramUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'bool', 'FcnPtr'};fcnNum=fcnNum+1;
%  const lms_dev_info_t * __cdecl LMS_GetDeviceInfo ( lms_device_t * device ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LMS_GetDeviceInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='lms_dev_info_tPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  const char * LMS_GetLibraryVersion (); 
fcns.thunkname{fcnNum}='cstringThunk';fcns.name{fcnNum}='LMS_GetLibraryVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  const char * __cdecl LMS_GetLastErrorMessage ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='LMS_GetLastErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
structs.lms_range_t.members=struct('min', 'double', 'max', 'double', 'step', 'double');
structs.lms_stream_meta_t.members=struct('timestamp', 'uint64', 'waitForTimestamp', 'bool', 'flushPartialPacket', 'bool');
structs.lms_stream_t.members=struct('handle', 'uint64', 'isTx', 'bool', 'channel', 'uint32', 'fifoSize', 'uint32', 'throughputVsLatency', 'single', 'error0', 'voidPtr');
structs.lms_stream_status_t.members=struct('active', 'bool', 'fifoFilledCount', 'uint32', 'fifoSize', 'uint32', 'underrun', 'uint32', 'overrun', 'uint32', 'droppedPackets', 'uint32', 'sampleRate', 'double', 'linkRate', 'double', 'timestamp', 'uint64');
structs.lms_dev_info_t.members=struct('deviceName', 'int8#32', 'expansionName', 'int8#32', 'firmwareVersion', 'int8#16', 'hardwareVersion', 'int8#16', 'protocolVersion', 'int8#16', 'boardSerialNumber', 'uint32', 'gatewareVersion', 'int8#16', 'gatewareRevision', 'int8#16', 'gatewareTargetBoard', 'int8#32');
enuminfo.lms_testsig_t=struct('LMS_TESTSIG_NONE',0,'LMS_TESTSIG_NCODIV8',1,'LMS_TESTSIG_NCODIV4',2,'LMS_TESTSIG_NCODIV8F',3,'LMS_TESTSIG_NCODIV4F',4,'LMS_TESTSIG_DC',5);
enuminfo.lms_prog_trg_t=struct('LMS_PROG_TRG_FX3',0,'LMS_PROG_TRG_FPGA',1,'LMS_PROG_TRG_MCU',2,'LMS_PROG_TRG_HPM7',3);
enuminfo.lms_gfir_t=struct('LMS_GFIR1',0,'LMS_GFIR2',1,'LMS_GFIR3',2);
enuminfo.lms_prog_md_t=struct('LMS_PROG_MD_RAM',0,'LMS_PROG_MD_FLASH',1,'LMS_PROG_MD_RST',2);
methodinfo=fcns;